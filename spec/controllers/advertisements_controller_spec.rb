require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

def valid_attributes
  {
    :content => "1231231",
    :phone_number => '123123'
  }
end

describe AdvertisementsController do

  before(:each) do
    @user = FactoryGirl.create(:user)
    test_sign_in(@user)
  end

  describe "GET index" do
    it "assigns all advertisements as @advertisements" do
      advertisement = FactoryGirl.create(:advertisement)
      get :index
      assigns(:advertisements).should eq([advertisement])
    end
  end

  describe "GET show" do
    it "assigns the requested advertisement as @advertisement" do
      advertisement = FactoryGirl.create(:advertisement)
      get :show, {:id => advertisement.to_param}
      assigns(:advertisement).should eq(advertisement)
    end
  end

  describe "GET new" do
    it "assigns a new advertisement as @advertisement" do
      get :new, {}
      assigns(:advertisement).should be_a_new(Advertisement)
    end
  end

  describe "GET edit" do
    it "assigns the requested advertisement as @advertisement" do
      advertisement = FactoryGirl.create(:advertisement)
      @user.advertisements << advertisement
      get :edit, {:id => advertisement.to_param}
      assigns(:advertisement).should eq(advertisement)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Advertisement" do
        expect {
          post :create, {:advertisement => valid_attributes}
        }.to change(Advertisement, :count).by(1)
      end

      it "assigns a newly created advertisement as @advertisement" do
        post :create, {:advertisement => valid_attributes}
        assigns(:advertisement).should be_a(Advertisement)
        assigns(:advertisement).should be_persisted
      end

      it "redirects to the created advertisement" do
        post :create, {:advertisement => valid_attributes}
        response.should redirect_to(Advertisement.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved advertisement as @advertisement" do
        Advertisement.any_instance.stub(:save).and_return(false)
        post :create, {:advertisement => {}}
        assigns(:advertisement).should be_a_new(Advertisement)
      end

      it "re-renders the 'new' template" do
        Advertisement.any_instance.stub(:save).and_return(false)
        post :create, {:advertisement => {}}
        response.should redirect_to('/advertisements')
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested advertisement" do
        advertisement = FactoryGirl.create(:advertisement)
        @user.advertisements << advertisement
        Advertisement.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => advertisement.to_param, :advertisement => {'these' => 'params'}}
      end

      it "assigns the requested advertisement as @advertisement" do
        advertisement = FactoryGirl.create(:advertisement)
        @user.advertisements << advertisement
        put :update, {:id => advertisement.to_param, :advertisement => valid_attributes}
        assigns(:advertisement).should eq(advertisement)
      end

      it "redirects to the advertisement" do
        advertisement = FactoryGirl.create(:advertisement)
        @user.advertisements << advertisement
        put :update, {:id => advertisement.to_param, :advertisement => valid_attributes}
        response.should redirect_to(advertisement)
      end
    end

    describe "with invalid params" do
      it "assigns the advertisement as @advertisement" do
        advertisement = FactoryGirl.create(:advertisement)
        @user.advertisements << advertisement
        Advertisement.any_instance.stub(:save).and_return(false)
        put :update, {:id => advertisement.to_param, :advertisement => {}}
        assigns(:advertisement).should eq(advertisement)
      end

      it "re-renders the 'edit' template" do
        advertisement = FactoryGirl.create(:advertisement)
        @user.advertisements << advertisement
        Advertisement.any_instance.stub(:save).and_return(false)
        put :update, {:id => advertisement.to_param, :advertisement => {}}
        response.should redirect_to(advertisement)
      end
    end
  end
end

describe AdvertisementsController do

  before(:each) do
    @admin = FactoryGirl.create(:admin)
    test_sign_in(@admin)
  end

  describe "DELETE destroy" do
    it "destroys the requested advertisement" do
      advertisement = Advertisement.create! valid_attributes
      expect {
        delete :destroy, {:id => advertisement.to_param}
      }.to change(Advertisement, :count).by(-1)
    end

    it "redirects to the advertisements list" do
      advertisement = Advertisement.create! valid_attributes
      delete :destroy, {:id => advertisement.to_param}
      response.should redirect_to(advertisements_url)
    end
  end
end
